var documenterSearchIndex = {"docs":
[{"location":"examples/advanced examples/#Advanced-Examples","page":"Advanced Examples","title":"Advanced Examples","text":"","category":"section"},{"location":"examples/advanced examples/","page":"Advanced Examples","title":"Advanced Examples","text":"These examples can be used as a basis for creating more complicated vizualizations.","category":"page"},{"location":"examples/advanced examples/#Powerflow","page":"Advanced Examples","title":"Powerflow","text":"","category":"section"},{"location":"examples/advanced examples/","page":"Advanced Examples","title":"Advanced Examples","text":"using PowerModels\nusing PowerModelsAnalytics\nusing PowerPlots\nusing ColorSchemes\nusing Setfield\nusing JuMP, Ipopt\ncase = parse_file(\"case14.m\")\nsol = run_ac_opf(case, optimizer_with_attributes(Ipopt.Optimizer, \"print_level\"=>0))\nupdate_data!(case,sol[\"solution\"])\n\nplot1 = powerplot(case,\n                # bus_data=:vm,\n                # bus_data_type=:quantitative,\n                gen_data=:pg,\n                gen_data_type=:quantitative,\n                branch_data=:pt,\n                branch_data_type=:quantitative,\n                branch_color=[\"black\",\"black\",\"red\"],\n                gen_color=[\"black\",\"black\",\"red\"]\n)\n\nplot1.layer[1][\"transform\"] = Dict{String, Any}[\n    Dict(\"calculate\"=>\"abs(datum.pt)/datum.rate_a*100\", \"as\"=>\"branch_Percent_Loading\"),\n    Dict(\"calculate\"=>\"abs(datum.pt)\", \"as\"=>\"BranchPower\")\n]\nplot1.layer[1][\"encoding\"][\"color\"][\"field\"]=\"branch_Percent_Loading\"\nplot1.layer[1][\"encoding\"][\"color\"][\"title\"]=\"Branch Utilization %\"\nplot1.layer[1][\"encoding\"][\"color\"][\"scale\"][\"domain\"]=[0,100]\nplot1.layer[1][\"encoding\"][\"size\"]=Dict(\"field\"=>\"BranchPower\", \"title\"=>\"Branch BaseMW\", \"type\"=>\"quantitative\", \"scale\"=>Dict(\"range\"=>[3,10]))\n\n\nplot1.layer[4][\"transform\"] = Dict{String, Any}[\n    Dict(\"calculate\"=>\"datum.pg/datum.pmax*100\", \"as\"=>\"gen_Percent_Loading\"),\n    Dict(\"calculate\"=>\"datum.pg\", \"as\"=>\"GenPower\")\n]\nplot1.layer[4][\"encoding\"][\"color\"][\"field\"]=\"gen_Percent_Loading\"\nplot1.layer[4][\"encoding\"][\"color\"][\"scale\"][\"domain\"]=[0,100]\nplot1.layer[4][\"encoding\"][\"color\"][\"title\"]=\"Gen Utilization %\"\nplot1.layer[4][\"encoding\"][\"size\"]=Dict(\"field\"=>\"GenPower\", \"title\"=>\"Gen BaseMW\", \"type\"=>\"quantitative\", \"scale\"=>Dict(\"range\"=>[300,1000]))\n\nplot1.layer[1][\"encoding\"][\"color\"][\"legend\"]=Dict(\"orient\"=>\"bottom-right\", \"offset\"=>-30)\nplot1.layer[4][\"encoding\"][\"color\"][\"legend\"]=Dict(\"orient\"=>\"bottom-right\")\n\n@set! plot1.resolve.scale.size=:independent\n@set! plot1.resolve.scale.color=:shared\n\nplot1","category":"page"},{"location":"examples/advanced examples/#Load-Blocks","page":"Advanced Examples","title":"Load Blocks","text":"","category":"section"},{"location":"examples/advanced examples/","page":"Advanced Examples","title":"Advanced Examples","text":"using PowerModels\nusing PowerModelsAnalytics\nusing PowerPlots\nusing ColorSchemes\nusing Setfield\n\ncase = parse_file(\"case14.m\")\ncase[\"branch\"][\"10\"][\"br_status\"] = 0\ncase[\"branch\"][\"16\"][\"br_status\"] = 0\ncase[\"branch\"][\"17\"][\"br_status\"] = 0\n\n# Identify loadk blocks for all components\nfor (block_id, bus_ids) in identify_blocks(case)\n    for bus_id in bus_ids\n        case[\"bus\"][bus_id][\"block\"]=block_id\n    end\nend\nfor (gen_id,gen) in case[\"gen\"]\n    gen[\"block\"] = case[\"bus\"][string(gen[\"gen_bus\"])][\"block\"]\nend\nfor (branch_id,branch) in case[\"branch\"]\n    f_bus = branch[\"f_bus\"]\n    t_bus = branch[\"t_bus\"]\n    if case[\"bus\"][\"$(f_bus)\"][\"block\"] == case[\"bus\"][\"$(t_bus)\"][\"block\"]\n        branch[\"block\"] =  case[\"bus\"][\"$(f_bus)\"][\"block\"]\n    else\n        branch[\"block\"] = \"damaged\"\n    end\nend\n\ncolor_range = colorscheme2array(ColorSchemes.colorschemes[:tableau_10])\ncolor_range = [color_range[i] for i in[1,2,4,3]]\nplot1 = powerplot(case; bus_data=:block, gen_data=:block, branch_data=:block, node_color=color_range, branch_color=color_range)\n\n@set! plot1.resolve.scale.color=:shared # share color scale for all components\nfor l in plot1.layer #set all layer titles to \"Load Blocks\"\n    l[\"encoding\"][\"color\"][\"title\"]=\"Load Blocks\"\nend\n\nplot1","category":"page"},{"location":"examples/advanced examples/#Restoration-Sequence","page":"Advanced Examples","title":"Restoration Sequence","text":"","category":"section"},{"location":"experimental/#Experimental","page":"Experimental Features","title":"Experimental","text":"","category":"section"},{"location":"experimental/","page":"Experimental Features","title":"Experimental Features","text":"The following are experimental features in PowerPlots.  They may change or dissapear. To use the experimental features, the experimental module must be imported.","category":"page"},{"location":"experimental/","page":"Experimental Features","title":"Experimental Features","text":"julia> using PowerPlots\njulia> using PowerPlots.Experimental","category":"page"},{"location":"experimental/#Apply-geographic-coordinates","page":"Experimental Features","title":"Apply geographic coordinates","text":"","category":"section"},{"location":"experimental/","page":"Experimental Features","title":"Experimental Features","text":"Change the coordinates from cartesian to a geographic projection. This is experimental because it is not well tested. VegaLite does not support geographic projections and zooming/panning yet, so combining with add_zoom! will not work.","category":"page"},{"location":"experimental/","page":"Experimental Features","title":"Experimental Features","text":"using PowerPlots\nusing PowerPlots.Experimental\nusing PowerModels\nusing Setfield\n\n#TODO use a case with actual geo coordinates to show the difference.\ncase = parse_file(\"case14.m\")\np1 = powerplot(case; width=300, height=300)\np2 = deepcopy(p1)\nPowerPlots.Experimental.cartesian2geo!(p2)\n\n@set! p1.title = \"Cartesian\"\n@set! p2.title = \"Geo Projection\"\n\np = [p1 p2]\n","category":"page"},{"location":"experimental/#Add-Zoom","page":"Experimental Features","title":"Add Zoom","text":"","category":"section"},{"location":"experimental/","page":"Experimental Features","title":"Experimental Features","text":"To enable zoom and pan on a plot use add_zoom!(plot).  This is experimental because hover will only work on the first layer (branches) when zoom is enabled.","category":"page"},{"location":"experimental/","page":"Experimental Features","title":"Experimental Features","text":"using PowerPlots\nusing PowerModels\ncase = parse_file(\"case14.m\")\nplot1 = powerplot(case)\nPowerPlots.Experimental.add_zoom!(plot1)\n\nplot1","category":"page"},{"location":"examples/basic examples/#Basic-Examples","page":"Basic Examples","title":"Basic Examples","text":"","category":"section"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"Simple examples for setting the data visualization and changing the color or size of components.","category":"page"},{"location":"examples/basic examples/#Initialize","page":"Basic Examples","title":"Initialize","text":"","category":"section"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"using PowerPlots, PowerModels\ndata = parse_file(\"$(joinpath(dirname(pathof(PowerModels)), \"..\"))/test/data/matpower/case5.m\")","category":"page"},{"location":"examples/basic examples/#Default-Plot","page":"Basic Examples","title":"Default Plot","text":"","category":"section"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"powerplot(data)","category":"page"},{"location":"examples/basic examples/#Change-Plot-Size","page":"Basic Examples","title":"Change Plot Size","text":"","category":"section"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"powerplot(data; width=300, height=300)","category":"page"},{"location":"examples/basic examples/#Modify-Colors","page":"Basic Examples","title":"Modify Colors","text":"","category":"section"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"The colors of the components can be set, using simple keywords. Any valid CSS color can be used. If a single color is used, the component will not change color based on system data.  See Color Ranges for how to use multiple colors.","category":"page"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"powerplot(data; bus_color=\"orange\",\n                gen_color=:purple,\n                branch_color=\"#AFAFAF\",\n                width=300, height=300)","category":"page"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"The aliases node_color and edge_color can overwrite all nodes and edges respectively. (does this apply in the order the keywords are placed?)","category":"page"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"powerplot(data; node_color=\"red\", edge_color=\"purple\", width=300, height=300)","category":"page"},{"location":"examples/basic examples/#Modify-Component-Size","page":"Basic Examples","title":"Modify Component Size","text":"","category":"section"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"The size of components can be set similarly.  A good size for node devices is typically around 100x larger than edge devices.","category":"page"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"powerplot(data, bus_size=1000, gen_size=100, branch_size=2, connector_size=10)","category":"page"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"Aliases to overide all node and edge sizes.","category":"page"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"powerplot(data, node_size=1000, edge_size=10, width=300, height=300)","category":"page"},{"location":"examples/basic examples/#Visualizing-System-Data","page":"Basic Examples","title":"Visualizing System Data","text":"","category":"section"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"Component data values from the PowerModels dictionary can be plotted by specfying the dictionary key. The key can be either a string or a symbol.  The data type can be :ordinal, :nominal, or :quantitative.","category":"page"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"p = powerplot(data, bus_data=\"bus_type\",\n                    bus_data_type=\"nominal\",\n                    branch_data=\"index\",\n                    branch_data_type=\"ordinal\",\n                    gen_data=\"pmax\",\n                    gen_data_type=\"quantitative\",\n                    width=300, height=300\n)","category":"page"},{"location":"examples/basic examples/#Color-Ranges","page":"Basic Examples","title":"Color Ranges","text":"","category":"section"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"Color ranges are automatically interpolated from a range that is provided.  If only a single color is given, the component will not change color based on the data.","category":"page"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"p = powerplot(data,\n                    gen_data=\"pmax\",\n                    gen_data_type=\"quantitative\",\n                    gen_color=[\"#232323\",\"#AAFAFA\"],\n                    width=300, height=300\n)","category":"page"},{"location":"examples/basic examples/#Color-Schemes","page":"Basic Examples","title":"Color Schemes","text":"","category":"section"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"Color schemes from the package ColorSchemes.jl can also be used to specify a color range.","category":"page"},{"location":"examples/basic examples/","page":"Basic Examples","title":"Basic Examples","text":"using ColorSchemes\npowerplot(data;\n            gen_data=:pmax,\n            gen_color=colorscheme2array(ColorSchemes.colorschemes[:summer]),\n            gen_data_type=:quantitative,\n            width=300, height=300\n)","category":"page"},{"location":"#PowerPlots.jl-Documentation","page":"Home","title":"PowerPlots.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PowerPlots","category":"page"},{"location":"","page":"Home","title":"Home","text":"PowerPlots.jl is a package for visualizing power grids, using the data spec from PowerModels.jl. This package uses VegaLite.jl as the plotting backend.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"pkg> add PowerPlots","category":"page"},{"location":"#Basic-Overview","page":"Home","title":"Basic Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Open a power systems case using PowerModels.jl and run the command powerplot on the data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PowerModels\nusing PowerPlots\ncase = parse_file(\"case14.m\")\npowerplot(case)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The function creates a layout for the graph and plots the system.  The plot is interactive, and hovering over a component allows you to see the component data. By default, plots are displayed in a browser window but using ElectronDisplay.jl will display plots in its own window.  Using the VSCode extension will display plots in the plot pane.","category":"page"},{"location":"","page":"Home","title":"Home","text":"NOTE: Interactive VegaLite plots are not currently supported by some notebooks, like Jupyter Notebook. If you use Jupyter Notebook, you can using ElectronDisplay.jl to display interactive plots.","category":"page"},{"location":"#Creating-Visualizations","page":"Home","title":"Creating Visualizations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The primary use for PowerPlots is to visualize data in the PowerModels dictionary.  Each component can specify a data value to visualize, such as the pmax for the generators or the rate_a of the branches.","category":"page"},{"location":"","page":"Home","title":"Home","text":"powerplot(case;\n    gen_data=:pmax,\n    branch_data=:rate_a,\n    branch_color=[:white,:blue],\n    branch_data_type=:quantitative\n)","category":"page"},{"location":"#Altering-Data","page":"Home","title":"Altering Data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"New data can be added to the dictionary and visualized as well.","category":"page"},{"location":"","page":"Home","title":"Home","text":"case[\"gen\"][\"1\"][\"gen_type\"] = \"PV\"\ncase[\"gen\"][\"2\"][\"gen_type\"] = \"Coal\"\ncase[\"gen\"][\"3\"][\"gen_type\"] = \"Hydro\"\ncase[\"gen\"][\"4\"][\"gen_type\"] = \"CCGT\"\ncase[\"gen\"][\"5\"][\"gen_type\"] = \"Wind\"\n\nusing ColorSchemes\npowerplot(case;\n    gen_data=:gen_type,\n    gen_color = colorscheme2array(ColorSchemes.colorschemes[:seaborn_deep]),\n    bus_color=:black\n)","category":"page"},{"location":"parameters/#Parameter-Arguments","page":"Parameters","title":"Parameter Arguments","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"The following parameters can be used to as keyword arguments to modify a plot","category":"page"},{"location":"parameters/#Plot-parameters","page":"Parameters","title":"Plot parameters","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"These paramters modify the entire plot.","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"Keyword Description Default\nwidth width of the plot in pixels 500\nheight height of the plot in pixels 500","category":"page"},{"location":"parameters/#Component-Parameters","page":"Parameters","title":"Component Parameters","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"These parameters modify a specific component.","category":"page"},{"location":"parameters/#Color","page":"Parameters","title":"Color","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"The color arguments can accept several inputs.  A single color can be specified using a color name as a symbol or a string.  CSS color names are supported.  In addition, hex color values in a string are supported.","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"powerplot(case; branch_color=:yellow)\npowerplot(case; branch_color=\"yellow\")\npowerplot(case; branch_color=\"#FFA71A)","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"A color range can be created by using several colors in an array. The range is used when component data is specified.","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"powerplot(case; branch_color=[:red, \"yellow\", \"#0000FF\"])","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"A color scheme from ColorSchemes.jl can be used, but the ColorScheme must be converted to an array of colors that can be interpreted by VegaLite.","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"using ColorSchemes\npowerplot(case; branch_color=colorscheme2array(ColorSchemes.colorschemes[:tableau_10]))","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"Keyword Description Default\nbranch_color set the color of a branch [\"#3182BD\", \"#5798CA\", \"#7CAED6\", \"#A0C5E2\", \"#C6DBEF\"]\ndcline_color set the color of a DC line [\"#756BB1\", \"#8F87C0\", \"#A8A3CE\", \"#C0BEDC\", \"#DADAEB\"]\nconnector_color set the color of a connector [:gray]\ngen_color set the color of a generator [\"#E6550D\", \"#EB7433\", \"#F19358\", \"#F8B17C\", \"#FDD0A2\"]\nbus_color set the color of a bus [\"#31A354\", \"#57B46F\", \"#7CC68A\", \"#A1D8A5\", \"#C7E9C0\"]\nnode_color set the color of all buses and generators N/A\nedge_color set the color of all branches, DC lines, and connectors N/A","category":"page"},{"location":"parameters/#Size","page":"Parameters","title":"Size","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"The size argument sets the size of a component.  The size does not vary with data in the base plot.","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"Keyword Description Default\nbranch_size set the size of a branch 5\ndcline_size set the size of a DC line 5\nconnector_size set the size of a connector 3\ngen_size set the size of a generator 500\nbus_size set the size of a bus 500\nnode_size set the size of all buses and generators N/A\nedge_size set the size of all branches, DC lines, and connectors N/A","category":"page"},{"location":"parameters/#Data","page":"Parameters","title":"Data","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"The data argument selects the data from the component dictionary to use in the visualization.  The data argument can be a string or a symbol.  The data value modifes the color of a component based on the color range.","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"powerplot(case; gen_data=:pmax)\npowerplot(case; gen_data=:pmin)","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"Keyword Description Default\nbranch_data set the data of a branch \"ComponentType\"\ndcline_data set the data of a DC line \"ComponentType\"\nconnector_data set the data of a connector \"ComponentType\"\ngen_data set the data of a generator \"ComponentType\"\nbus_data set the data of a bus \"ComponentType\"","category":"page"},{"location":"parameters/#Data-Type","page":"Parameters","title":"Data Type","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"The Data Type in VegaLite can be :nominal, :ordinal, or :quantintative.  :nominal and :ordinal are both discrete values, and :quantitative is continuous.  In the context of the simple powerplot, there is no distinction  between :nominal and :ordinal.","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"powerplot(case; gen_data=:pg, gen_data_type=:quantitative) # the pg is continous, so use a continous scale\npowerplot(case; gen_data=:index, gen_data_type=:nominal) # the index is a discrete value, so use a discrete scale","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"Keyword Description Default\nbranch_data_type set the data type of a branch :nominal\ndcline_data_type set the data type of a DC line :nominal\nconnector_data_type set the data type of a connector :nominal\ngen_data_type set the data type of a generator :nominal\nbus_data_type set the data type of a bus :nominal","category":"page"}]
}
